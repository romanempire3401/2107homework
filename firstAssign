#include <stdio.h>

#define LEN_A 10

void print_array(int[], int);
void reverse(int[], int);
double average(int[], int);
void insert(int[], int, int, int);
int less_than_average(int[], int);
void rotate_right(int[], int, int);
void array_copy(int[], int[], int);
void initialize(int[], int, int);
void evens_on_left(int[], int);
int find(int A[], int len, int x);
int findLast(int A[], int len, int x);
int secondLargest(int [], int);

int main(int argc, char **argv)
{
  int A[] = {9, 21, 321, 117, 27, 64, 13, 9, 12, 208};
  int B[LEN_A+1];
  int newValue=505;

  printf("A[] is:\n");
  print_array(A, LEN_A);

  initialize(B, LEN_A+1, 0);
  printf("B[] is:\n");
  print_array(B, LEN_A+1);

  array_copy(B, A, LEN_A);
  printf("but now it's\n");
  print_array(B, LEN_A+1);

  insert(B, newValue, 0, LEN_A);
  printf("and after inserting %d at the beginning it's\n", newValue);
  print_array(B, LEN_A+1);

  printf("The average of A[] is %f\n", average(A,LEN_A));
  printf("There are %d items in A[] less than this.\n", less_than_average(A,LEN_A));

  reverse(A, LEN_A);
  print_array(A, LEN_A);


  printf("The second largest int is %d.\n", secondLargest(A, LEN_A));
/*
  rotate_right(A, LEN_A, 3);
  print_array(A, LEN_A);
*/
  evens_on_left(A, LEN_A);
  print_array(A, LEN_A);

  printf("The index of the first occurrence of %d is %d.\n", 9, find(A, LEN_A, 9));
  printf("The index of the last occurrence of %d is %d.\n", 9, findLast(A, LEN_A, 9));

  return 0;
}

/* prints A[] inside parentheses with each value separated
   by commas to stdout (which will be the screen). */
void print_array(int A[], int length) {
	int i;

	for(i=0; i < length-1; i++){
        printf("%d, ", A[i]);
    }
    printf("%d\n", A[length-1]);
}

/* returns the average of the items in A[] or 0.0 if A is empty */
double average(int A[], int length) {
  /* for now return 1.0 as a placeholder.  We do this just so that the program
     compiles without warning until we've finished */
	 int i;
	 double sum=0, avg=0;

	 for(i=0; i<length; i++){
		sum += A[i];
	 }
	 avg = sum/length;

  return avg;
}

/* returns the number of items in A that are less than the
   average of the items in A */
int less_than_average(int A[], int length) {
  /* for now return 0 as a placeholder.  We do this just so that the program
     compiles without warning until we've finished */
     int i, counter=0;
	 double sum=0, avg=0;

	 for(i=0; i<length; i++){
		sum += A[i];
	 }

	 avg = sum/length;

	 for(i=0; i < length; i++){
        if(A[i] < avg)
            counter++;
        else continue;
	 }

  return counter;
}

/* Reverses the values in A[].  For example, if before the function,
   A[] contained [1,2,3,4,5], after the function, A[] contains
   [5,4,3,2,1] */
void reverse(int A[], int length) {
    int i, j;
    int B[length];

    for(i=0, j=length-1; i < length; i++, j--){
        B[j] = A[i];
    }
    for(i=0, j=0; i < length; i++, j++){
        A[i] = B[j];
    }
}

/* returns the second largest item in A[], or -1 if len < 2 */
int secondLargest(int A[], int length) {
  /* for now return 0 as a placeholder.  We do this just so that the program
     compiles without warning until we've finished */
     int i, var, max1, max2; //var is a temporary variable

     if (length < 2)
        return -1;
     else{
            max1 = A[0];
            max2 = A[1];

            if(max2 > max1){
                var = max2;
                max2 = max1;
                max1 = var;
            }

            for(i=2; i < length; i++){
                if(A[i] > max1){
                    max2 = max1;
                    max1 = A[i];
                }
                else if(A[i] > max2)
                    max2 = A[i];
            }
     }
  return max2;
}

/* rotates the values in the array numPlaces to the right */
/* for example, if A[] is initially 10,20,30,40,50, and numPlaces=2 */
/* after the function finishes, A[] would be 40,50,10,20,30 */
void rotate_right(int A[], int length, int numPlaces) {
}

/* inserts the value n in A[] at the given index and shifts
   all other values up one position.  A[] contains length items.

   It is up to the caller to make sure that there is enough space
   in A[] to accomodate the new item, and that the index is valid. */
void insert(int A[], int n, int index, int length) {
    int i;

    for(i=index+1; i < length+1; i++){
        A[index+1] = A[index];
    }
    A[index] = n;
}

/* copies the first numItems from S to D. */
void array_copy(int D[], int S[], int numItems) {
    /* array_copy(B, A, LEN_A); */
    int i;

    for(i=0; i < numItems; i++){
        D[i] = S[i];
    }
}


/* sets the first len elements of A to initialValue */
void initialize(int A[], int len, int initialValue) {
    int i;

    for(i=0; i < len; i++){
        A[i] = initialValue;
    }
}

/* shuffles the values in A so that the even values
   are all to the left of the odd values */
void evens_on_left(int A[], int len) {
    int i, var, j = 0, k = len-1;

    while(j < k){
        if(A[j]%2 == 0){
            j++;
        }else{
            var = A[k];
            A[k] = A[j];
            A[j] = var;
            k--;
        }
    }
}

/* returns the index of the first occurrence of
 * x in A[] or -1 if x doesn't exist in A[] */
int find(int A[], int len, int x) {
    int i, pos;

    for(i=0; i < len; ){
        if(A[i] != x){
            i++;
        }else{
            return i;
            break;
        }
    }
    return -1;
}

/* returns the index of the last occurrence of
 * x in A[] or -1 if x doesn't exist in A[] */
int findLast(int A[], int len, int x) {
    int i, pos;

    for(i=len; i > 0; ){
        if(A[i] != x){
            i--;
        }else{
            return i;
            break;
        }
    }
    return -1;
}
